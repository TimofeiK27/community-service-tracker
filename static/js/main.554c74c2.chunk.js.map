{"version":3,"sources":["Images/wolflogo.png","Pages/Header/pageHeader.tsx","Pages/Body/body.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","HeaderButtons","title","className","PageHeader","useState","show_nav","set_nav","onClick","viewBox","xmlns","d","Body","src","require","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,sC,sFCErCC,EAA4D,SAAC,GAE5D,IADLC,EACI,EADJA,MAEA,OACE,uBAAGC,UAAU,yDACVD,IA2CQE,EAtCI,WAAO,IAAD,EACKC,oBAAS,GADd,mBAChBC,EADgB,KACNC,EADM,KAEvB,OACE,yBAAKJ,UAAU,8EACb,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,0BAAhB,8BAIF,yBAAKA,UAAS,mBACZ,4BACEK,QAAS,WACPD,GAASD,IAEXH,UAAU,8FAEV,yBACEA,UAAU,uBACVM,QAAQ,YACRC,MAAM,8BAEN,0BAAMC,EAAE,mDAId,yBACER,UAAS,UAAKG,EAAW,QAAU,SAA1B,+BAET,yBAAKH,UAAU,WACb,kBAAC,EAAD,CAAeD,MAAO,YACtB,kBAAC,EAAD,CAAeA,MAAO,WACtB,kBAAC,EAAD,CAAeA,MAAO,mBC1BjBU,EAfF,WACT,OACI,yBAAKT,UAAW,UACZ,yBAAKA,UAAW,uBACZ,yBAAKA,UAAW,uBAAwBU,IAAKC,EAAQ,IAA8BC,IAAK,MAE5F,yBAAKZ,UAAW,gCACZ,wBAAIA,UAAW,4EAAf,qCACA,wBAAIA,UAAW,4EAAf,qCACA,wBAAIA,UAAW,qFAAf,sDCyBDa,EATH,WACV,OACE,yBAAKb,UAAU,uCACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCnBcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.554c74c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wolflogo.731ead9b.png\";","import React, { useState } from \"react\";\n/* eslint-disable jsx-a11y/anchor-is-valid */\nconst HeaderButtons: React.FunctionComponent<{ title: string }> = ({\n  title,\n}) => {\n  return (\n    <a className=\"block lg:inline-block text-white mr-6 mt-2 lg:mt-auto\">\n      {title}\n    </a>\n  );\n};\n\nconst PageHeader = () => {\n  const [show_nav, set_nav] = useState(true);\n  return (\n    <nav className=\"mb-10 bg-top-red p-6 flex flex-wrap font-black item-center justify-between\">\n      <div className=\"text-white mr-6 \">\n        <span className=\"text-xl tracking-tight\">\n          Wolf Pack Service Tracker\n        </span>\n      </div>\n      <div className={`block lg:hidden`}>\n        <button\n          onClick={() => {\n            set_nav(!show_nav);\n          }}\n          className=\"px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\"\n        >\n          <svg\n            className=\"fill-current h-3 w-3\"\n            viewBox=\"0 0 20 20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\n          </svg>\n        </button>\n      </div>\n      <div\n        className={`${show_nav ? \"block\" : \"hidden\"} lg:block w-full lg:w-auto`}\n      >\n        <div className=\"text-lg\">\n          <HeaderButtons title={\"Account\"} />\n          <HeaderButtons title={\"Logout\"} />\n          <HeaderButtons title={\"Track time\"} />\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default PageHeader;\n","import React from \"react\";\n\nconst Body = () => {\n    return (\n        <div className={\"flex-1\"}>\n            <div className={\"flex justify-center\"}>\n                <img className={\"py-10 w-1/3 lg:w-1/6\"} src={require(\"../../Images/wolflogo.png\")} alt={\"\"} />\n            </div>\n            <div className={\"flex flex-col justify-center\"}>\n                <h1 className={\"text-center text-white py-3 text-4xl sm:text-4xl lg:text-5xl xl:text-6xl\"}>EASTLAKE COMMUNITY SERVICE PORTAL</h1>\n                <h2 className={\"text-center text-white py-3 text-base sm:text-xl lg:text-2xl xl:text-3xl\"}>Login to track service activities</h2>\n                <h3 className={\"text-center font-light text-white py-3 text-sm sm:text-base lg:text-lg xl:text-xl\"}>First time here? Sign up with your lwsd account</h3>\n            </div>\n        </div>\n    );\n};\n\nexport default Body;","import React from \"react\";\n//import logo from \"./logo.svg\";\n\nimport PageHeader from \"./Pages/Header/pageHeader\";\nimport Body from \"./Pages/Body/body\"\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\nconst App = () => {\n  return (\n    <div className=\"h-screen bg-eastlake-grey font-text\">\n      <PageHeader />\n      <Body />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/tailwind.out.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}